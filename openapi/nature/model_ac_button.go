/*
Nature API

Read/Write Nature Remo

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ACButton Specify \"power-off\" always if you want the air conditioner powered off. Empty means powered on.
type ACButton string

// List of ACButton
const (
	ACBUTTON_EMPTY ACButton = ""
	ACBUTTON_POWER_OFF ACButton = "power-off"
)

// All allowed values of ACButton enum
var AllowedACButtonEnumValues = []ACButton{
	"",
	"power-off",
}

func (v *ACButton) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ACButton(value)
	for _, existing := range AllowedACButtonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ACButton", value)
}

// NewACButtonFromValue returns a pointer to a valid ACButton
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewACButtonFromValue(v string) (*ACButton, error) {
	ev := ACButton(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ACButton: valid values are %v", v, AllowedACButtonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ACButton) IsValid() bool {
	for _, existing := range AllowedACButtonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ACButton value
func (v ACButton) Ptr() *ACButton {
	return &v
}

type NullableACButton struct {
	value *ACButton
	isSet bool
}

func (v NullableACButton) Get() *ACButton {
	return v.value
}

func (v *NullableACButton) Set(val *ACButton) {
	v.value = val
	v.isSet = true
}

func (v NullableACButton) IsSet() bool {
	return v.isSet
}

func (v *NullableACButton) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACButton(val *ACButton) *NullableACButton {
	return &NullableACButton{value: val, isSet: true}
}

func (v NullableACButton) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACButton) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

