/*
Nature API

Read/Write Nature Remo

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AirCon struct for AirCon
type AirCon struct {
	Range *AirConRange `json:"range,omitempty"`
	TempUnit *string `json:"tempUnit,omitempty"`
}

// NewAirCon instantiates a new AirCon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAirCon() *AirCon {
	this := AirCon{}
	return &this
}

// NewAirConWithDefaults instantiates a new AirCon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAirConWithDefaults() *AirCon {
	this := AirCon{}
	return &this
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *AirCon) GetRange() AirConRange {
	if o == nil || o.Range == nil {
		var ret AirConRange
		return ret
	}
	return *o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirCon) GetRangeOk() (*AirConRange, bool) {
	if o == nil || o.Range == nil {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *AirCon) HasRange() bool {
	if o != nil && o.Range != nil {
		return true
	}

	return false
}

// SetRange gets a reference to the given AirConRange and assigns it to the Range field.
func (o *AirCon) SetRange(v AirConRange) {
	o.Range = &v
}

// GetTempUnit returns the TempUnit field value if set, zero value otherwise.
func (o *AirCon) GetTempUnit() string {
	if o == nil || o.TempUnit == nil {
		var ret string
		return ret
	}
	return *o.TempUnit
}

// GetTempUnitOk returns a tuple with the TempUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirCon) GetTempUnitOk() (*string, bool) {
	if o == nil || o.TempUnit == nil {
		return nil, false
	}
	return o.TempUnit, true
}

// HasTempUnit returns a boolean if a field has been set.
func (o *AirCon) HasTempUnit() bool {
	if o != nil && o.TempUnit != nil {
		return true
	}

	return false
}

// SetTempUnit gets a reference to the given string and assigns it to the TempUnit field.
func (o *AirCon) SetTempUnit(v string) {
	o.TempUnit = &v
}

func (o AirCon) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Range != nil {
		toSerialize["range"] = o.Range
	}
	if o.TempUnit != nil {
		toSerialize["tempUnit"] = o.TempUnit
	}
	return json.Marshal(toSerialize)
}

type NullableAirCon struct {
	value *AirCon
	isSet bool
}

func (v NullableAirCon) Get() *AirCon {
	return v.value
}

func (v *NullableAirCon) Set(val *AirCon) {
	v.value = val
	v.isSet = true
}

func (v NullableAirCon) IsSet() bool {
	return v.isSet
}

func (v *NullableAirCon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAirCon(val *AirCon) *NullableAirCon {
	return &NullableAirCon{value: val, isSet: true}
}

func (v NullableAirCon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAirCon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


