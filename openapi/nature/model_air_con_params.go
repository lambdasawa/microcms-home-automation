/*
Nature API

Read/Write Nature Remo

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AirConParams struct for AirConParams
type AirConParams struct {
	// The temperature in string format. The unit is described in Aircon object. The range of Temperatures which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.
	Temp *string `json:"temp,omitempty"`
	Mode *OperationMode `json:"mode,omitempty"`
	Vol *AirVolume `json:"vol,omitempty"`
	Dir *AirDirection `json:"dir,omitempty"`
	Button *ACButton `json:"button,omitempty"`
}

// NewAirConParams instantiates a new AirConParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAirConParams() *AirConParams {
	this := AirConParams{}
	return &this
}

// NewAirConParamsWithDefaults instantiates a new AirConParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAirConParamsWithDefaults() *AirConParams {
	this := AirConParams{}
	return &this
}

// GetTemp returns the Temp field value if set, zero value otherwise.
func (o *AirConParams) GetTemp() string {
	if o == nil || o.Temp == nil {
		var ret string
		return ret
	}
	return *o.Temp
}

// GetTempOk returns a tuple with the Temp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirConParams) GetTempOk() (*string, bool) {
	if o == nil || o.Temp == nil {
		return nil, false
	}
	return o.Temp, true
}

// HasTemp returns a boolean if a field has been set.
func (o *AirConParams) HasTemp() bool {
	if o != nil && o.Temp != nil {
		return true
	}

	return false
}

// SetTemp gets a reference to the given string and assigns it to the Temp field.
func (o *AirConParams) SetTemp(v string) {
	o.Temp = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *AirConParams) GetMode() OperationMode {
	if o == nil || o.Mode == nil {
		var ret OperationMode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirConParams) GetModeOk() (*OperationMode, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *AirConParams) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given OperationMode and assigns it to the Mode field.
func (o *AirConParams) SetMode(v OperationMode) {
	o.Mode = &v
}

// GetVol returns the Vol field value if set, zero value otherwise.
func (o *AirConParams) GetVol() AirVolume {
	if o == nil || o.Vol == nil {
		var ret AirVolume
		return ret
	}
	return *o.Vol
}

// GetVolOk returns a tuple with the Vol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirConParams) GetVolOk() (*AirVolume, bool) {
	if o == nil || o.Vol == nil {
		return nil, false
	}
	return o.Vol, true
}

// HasVol returns a boolean if a field has been set.
func (o *AirConParams) HasVol() bool {
	if o != nil && o.Vol != nil {
		return true
	}

	return false
}

// SetVol gets a reference to the given AirVolume and assigns it to the Vol field.
func (o *AirConParams) SetVol(v AirVolume) {
	o.Vol = &v
}

// GetDir returns the Dir field value if set, zero value otherwise.
func (o *AirConParams) GetDir() AirDirection {
	if o == nil || o.Dir == nil {
		var ret AirDirection
		return ret
	}
	return *o.Dir
}

// GetDirOk returns a tuple with the Dir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirConParams) GetDirOk() (*AirDirection, bool) {
	if o == nil || o.Dir == nil {
		return nil, false
	}
	return o.Dir, true
}

// HasDir returns a boolean if a field has been set.
func (o *AirConParams) HasDir() bool {
	if o != nil && o.Dir != nil {
		return true
	}

	return false
}

// SetDir gets a reference to the given AirDirection and assigns it to the Dir field.
func (o *AirConParams) SetDir(v AirDirection) {
	o.Dir = &v
}

// GetButton returns the Button field value if set, zero value otherwise.
func (o *AirConParams) GetButton() ACButton {
	if o == nil || o.Button == nil {
		var ret ACButton
		return ret
	}
	return *o.Button
}

// GetButtonOk returns a tuple with the Button field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirConParams) GetButtonOk() (*ACButton, bool) {
	if o == nil || o.Button == nil {
		return nil, false
	}
	return o.Button, true
}

// HasButton returns a boolean if a field has been set.
func (o *AirConParams) HasButton() bool {
	if o != nil && o.Button != nil {
		return true
	}

	return false
}

// SetButton gets a reference to the given ACButton and assigns it to the Button field.
func (o *AirConParams) SetButton(v ACButton) {
	o.Button = &v
}

func (o AirConParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Temp != nil {
		toSerialize["temp"] = o.Temp
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.Vol != nil {
		toSerialize["vol"] = o.Vol
	}
	if o.Dir != nil {
		toSerialize["dir"] = o.Dir
	}
	if o.Button != nil {
		toSerialize["button"] = o.Button
	}
	return json.Marshal(toSerialize)
}

type NullableAirConParams struct {
	value *AirConParams
	isSet bool
}

func (v NullableAirConParams) Get() *AirConParams {
	return v.value
}

func (v *NullableAirConParams) Set(val *AirConParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAirConParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAirConParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAirConParams(val *AirConParams) *NullableAirConParams {
	return &NullableAirConParams{value: val, isSet: true}
}

func (v NullableAirConParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAirConParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


