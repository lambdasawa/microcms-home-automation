/*
Nature API

Read/Write Nature Remo

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AirConRange struct for AirConRange
type AirConRange struct {
	Modes *AirConRangeModes `json:"modes,omitempty"`
	FixedButtons []ACButton `json:"fixedButtons,omitempty"`
}

// NewAirConRange instantiates a new AirConRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAirConRange() *AirConRange {
	this := AirConRange{}
	return &this
}

// NewAirConRangeWithDefaults instantiates a new AirConRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAirConRangeWithDefaults() *AirConRange {
	this := AirConRange{}
	return &this
}

// GetModes returns the Modes field value if set, zero value otherwise.
func (o *AirConRange) GetModes() AirConRangeModes {
	if o == nil || o.Modes == nil {
		var ret AirConRangeModes
		return ret
	}
	return *o.Modes
}

// GetModesOk returns a tuple with the Modes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirConRange) GetModesOk() (*AirConRangeModes, bool) {
	if o == nil || o.Modes == nil {
		return nil, false
	}
	return o.Modes, true
}

// HasModes returns a boolean if a field has been set.
func (o *AirConRange) HasModes() bool {
	if o != nil && o.Modes != nil {
		return true
	}

	return false
}

// SetModes gets a reference to the given AirConRangeModes and assigns it to the Modes field.
func (o *AirConRange) SetModes(v AirConRangeModes) {
	o.Modes = &v
}

// GetFixedButtons returns the FixedButtons field value if set, zero value otherwise.
func (o *AirConRange) GetFixedButtons() []ACButton {
	if o == nil || o.FixedButtons == nil {
		var ret []ACButton
		return ret
	}
	return o.FixedButtons
}

// GetFixedButtonsOk returns a tuple with the FixedButtons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirConRange) GetFixedButtonsOk() ([]ACButton, bool) {
	if o == nil || o.FixedButtons == nil {
		return nil, false
	}
	return o.FixedButtons, true
}

// HasFixedButtons returns a boolean if a field has been set.
func (o *AirConRange) HasFixedButtons() bool {
	if o != nil && o.FixedButtons != nil {
		return true
	}

	return false
}

// SetFixedButtons gets a reference to the given []ACButton and assigns it to the FixedButtons field.
func (o *AirConRange) SetFixedButtons(v []ACButton) {
	o.FixedButtons = v
}

func (o AirConRange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Modes != nil {
		toSerialize["modes"] = o.Modes
	}
	if o.FixedButtons != nil {
		toSerialize["fixedButtons"] = o.FixedButtons
	}
	return json.Marshal(toSerialize)
}

type NullableAirConRange struct {
	value *AirConRange
	isSet bool
}

func (v NullableAirConRange) Get() *AirConRange {
	return v.value
}

func (v *NullableAirConRange) Set(val *AirConRange) {
	v.value = val
	v.isSet = true
}

func (v NullableAirConRange) IsSet() bool {
	return v.isSet
}

func (v *NullableAirConRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAirConRange(val *AirConRange) *NullableAirConRange {
	return &NullableAirConRange{value: val, isSet: true}
}

func (v NullableAirConRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAirConRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


