/*
Nature API

Read/Write Nature Remo

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AirConRangeMode struct for AirConRangeMode
type AirConRangeMode struct {
	Temp []string `json:"temp,omitempty"`
	Vol []AirVolume `json:"vol,omitempty"`
	Dir []AirDirection `json:"dir,omitempty"`
}

// NewAirConRangeMode instantiates a new AirConRangeMode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAirConRangeMode() *AirConRangeMode {
	this := AirConRangeMode{}
	return &this
}

// NewAirConRangeModeWithDefaults instantiates a new AirConRangeMode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAirConRangeModeWithDefaults() *AirConRangeMode {
	this := AirConRangeMode{}
	return &this
}

// GetTemp returns the Temp field value if set, zero value otherwise.
func (o *AirConRangeMode) GetTemp() []string {
	if o == nil || o.Temp == nil {
		var ret []string
		return ret
	}
	return o.Temp
}

// GetTempOk returns a tuple with the Temp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirConRangeMode) GetTempOk() ([]string, bool) {
	if o == nil || o.Temp == nil {
		return nil, false
	}
	return o.Temp, true
}

// HasTemp returns a boolean if a field has been set.
func (o *AirConRangeMode) HasTemp() bool {
	if o != nil && o.Temp != nil {
		return true
	}

	return false
}

// SetTemp gets a reference to the given []string and assigns it to the Temp field.
func (o *AirConRangeMode) SetTemp(v []string) {
	o.Temp = v
}

// GetVol returns the Vol field value if set, zero value otherwise.
func (o *AirConRangeMode) GetVol() []AirVolume {
	if o == nil || o.Vol == nil {
		var ret []AirVolume
		return ret
	}
	return o.Vol
}

// GetVolOk returns a tuple with the Vol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirConRangeMode) GetVolOk() ([]AirVolume, bool) {
	if o == nil || o.Vol == nil {
		return nil, false
	}
	return o.Vol, true
}

// HasVol returns a boolean if a field has been set.
func (o *AirConRangeMode) HasVol() bool {
	if o != nil && o.Vol != nil {
		return true
	}

	return false
}

// SetVol gets a reference to the given []AirVolume and assigns it to the Vol field.
func (o *AirConRangeMode) SetVol(v []AirVolume) {
	o.Vol = v
}

// GetDir returns the Dir field value if set, zero value otherwise.
func (o *AirConRangeMode) GetDir() []AirDirection {
	if o == nil || o.Dir == nil {
		var ret []AirDirection
		return ret
	}
	return o.Dir
}

// GetDirOk returns a tuple with the Dir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirConRangeMode) GetDirOk() ([]AirDirection, bool) {
	if o == nil || o.Dir == nil {
		return nil, false
	}
	return o.Dir, true
}

// HasDir returns a boolean if a field has been set.
func (o *AirConRangeMode) HasDir() bool {
	if o != nil && o.Dir != nil {
		return true
	}

	return false
}

// SetDir gets a reference to the given []AirDirection and assigns it to the Dir field.
func (o *AirConRangeMode) SetDir(v []AirDirection) {
	o.Dir = v
}

func (o AirConRangeMode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Temp != nil {
		toSerialize["temp"] = o.Temp
	}
	if o.Vol != nil {
		toSerialize["vol"] = o.Vol
	}
	if o.Dir != nil {
		toSerialize["dir"] = o.Dir
	}
	return json.Marshal(toSerialize)
}

type NullableAirConRangeMode struct {
	value *AirConRangeMode
	isSet bool
}

func (v NullableAirConRangeMode) Get() *AirConRangeMode {
	return v.value
}

func (v *NullableAirConRangeMode) Set(val *AirConRangeMode) {
	v.value = val
	v.isSet = true
}

func (v NullableAirConRangeMode) IsSet() bool {
	return v.isSet
}

func (v *NullableAirConRangeMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAirConRangeMode(val *AirConRangeMode) *NullableAirConRangeMode {
	return &NullableAirConRangeMode{value: val, isSet: true}
}

func (v NullableAirConRangeMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAirConRangeMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


