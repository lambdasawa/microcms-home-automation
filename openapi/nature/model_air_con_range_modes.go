/*
Nature API

Read/Write Nature Remo

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AirConRangeModes struct for AirConRangeModes
type AirConRangeModes struct {
	Cool *AirConRangeMode `json:"cool,omitempty"`
	Warm *AirConRangeMode `json:"warm,omitempty"`
	Dry *AirConRangeMode `json:"dry,omitempty"`
	Blow *AirConRangeMode `json:"blow,omitempty"`
	Auto *AirConRangeMode `json:"auto,omitempty"`
}

// NewAirConRangeModes instantiates a new AirConRangeModes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAirConRangeModes() *AirConRangeModes {
	this := AirConRangeModes{}
	return &this
}

// NewAirConRangeModesWithDefaults instantiates a new AirConRangeModes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAirConRangeModesWithDefaults() *AirConRangeModes {
	this := AirConRangeModes{}
	return &this
}

// GetCool returns the Cool field value if set, zero value otherwise.
func (o *AirConRangeModes) GetCool() AirConRangeMode {
	if o == nil || o.Cool == nil {
		var ret AirConRangeMode
		return ret
	}
	return *o.Cool
}

// GetCoolOk returns a tuple with the Cool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirConRangeModes) GetCoolOk() (*AirConRangeMode, bool) {
	if o == nil || o.Cool == nil {
		return nil, false
	}
	return o.Cool, true
}

// HasCool returns a boolean if a field has been set.
func (o *AirConRangeModes) HasCool() bool {
	if o != nil && o.Cool != nil {
		return true
	}

	return false
}

// SetCool gets a reference to the given AirConRangeMode and assigns it to the Cool field.
func (o *AirConRangeModes) SetCool(v AirConRangeMode) {
	o.Cool = &v
}

// GetWarm returns the Warm field value if set, zero value otherwise.
func (o *AirConRangeModes) GetWarm() AirConRangeMode {
	if o == nil || o.Warm == nil {
		var ret AirConRangeMode
		return ret
	}
	return *o.Warm
}

// GetWarmOk returns a tuple with the Warm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirConRangeModes) GetWarmOk() (*AirConRangeMode, bool) {
	if o == nil || o.Warm == nil {
		return nil, false
	}
	return o.Warm, true
}

// HasWarm returns a boolean if a field has been set.
func (o *AirConRangeModes) HasWarm() bool {
	if o != nil && o.Warm != nil {
		return true
	}

	return false
}

// SetWarm gets a reference to the given AirConRangeMode and assigns it to the Warm field.
func (o *AirConRangeModes) SetWarm(v AirConRangeMode) {
	o.Warm = &v
}

// GetDry returns the Dry field value if set, zero value otherwise.
func (o *AirConRangeModes) GetDry() AirConRangeMode {
	if o == nil || o.Dry == nil {
		var ret AirConRangeMode
		return ret
	}
	return *o.Dry
}

// GetDryOk returns a tuple with the Dry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirConRangeModes) GetDryOk() (*AirConRangeMode, bool) {
	if o == nil || o.Dry == nil {
		return nil, false
	}
	return o.Dry, true
}

// HasDry returns a boolean if a field has been set.
func (o *AirConRangeModes) HasDry() bool {
	if o != nil && o.Dry != nil {
		return true
	}

	return false
}

// SetDry gets a reference to the given AirConRangeMode and assigns it to the Dry field.
func (o *AirConRangeModes) SetDry(v AirConRangeMode) {
	o.Dry = &v
}

// GetBlow returns the Blow field value if set, zero value otherwise.
func (o *AirConRangeModes) GetBlow() AirConRangeMode {
	if o == nil || o.Blow == nil {
		var ret AirConRangeMode
		return ret
	}
	return *o.Blow
}

// GetBlowOk returns a tuple with the Blow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirConRangeModes) GetBlowOk() (*AirConRangeMode, bool) {
	if o == nil || o.Blow == nil {
		return nil, false
	}
	return o.Blow, true
}

// HasBlow returns a boolean if a field has been set.
func (o *AirConRangeModes) HasBlow() bool {
	if o != nil && o.Blow != nil {
		return true
	}

	return false
}

// SetBlow gets a reference to the given AirConRangeMode and assigns it to the Blow field.
func (o *AirConRangeModes) SetBlow(v AirConRangeMode) {
	o.Blow = &v
}

// GetAuto returns the Auto field value if set, zero value otherwise.
func (o *AirConRangeModes) GetAuto() AirConRangeMode {
	if o == nil || o.Auto == nil {
		var ret AirConRangeMode
		return ret
	}
	return *o.Auto
}

// GetAutoOk returns a tuple with the Auto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirConRangeModes) GetAutoOk() (*AirConRangeMode, bool) {
	if o == nil || o.Auto == nil {
		return nil, false
	}
	return o.Auto, true
}

// HasAuto returns a boolean if a field has been set.
func (o *AirConRangeModes) HasAuto() bool {
	if o != nil && o.Auto != nil {
		return true
	}

	return false
}

// SetAuto gets a reference to the given AirConRangeMode and assigns it to the Auto field.
func (o *AirConRangeModes) SetAuto(v AirConRangeMode) {
	o.Auto = &v
}

func (o AirConRangeModes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cool != nil {
		toSerialize["cool"] = o.Cool
	}
	if o.Warm != nil {
		toSerialize["warm"] = o.Warm
	}
	if o.Dry != nil {
		toSerialize["dry"] = o.Dry
	}
	if o.Blow != nil {
		toSerialize["blow"] = o.Blow
	}
	if o.Auto != nil {
		toSerialize["auto"] = o.Auto
	}
	return json.Marshal(toSerialize)
}

type NullableAirConRangeModes struct {
	value *AirConRangeModes
	isSet bool
}

func (v NullableAirConRangeModes) Get() *AirConRangeModes {
	return v.value
}

func (v *NullableAirConRangeModes) Set(val *AirConRangeModes) {
	v.value = val
	v.isSet = true
}

func (v NullableAirConRangeModes) IsSet() bool {
	return v.isSet
}

func (v *NullableAirConRangeModes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAirConRangeModes(val *AirConRangeModes) *NullableAirConRangeModes {
	return &NullableAirConRangeModes{value: val, isSet: true}
}

func (v NullableAirConRangeModes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAirConRangeModes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


