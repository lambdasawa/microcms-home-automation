/*
Nature API

Read/Write Nature Remo

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AirDirection Empty means automatic.
type AirDirection string

// List of AirDirection
const (
	AIRDIRECTION_EMPTY AirDirection = ""
	AIRDIRECTION_AUTO AirDirection = "auto"
	AIRDIRECTION_SWING AirDirection = "swing"
)

// All allowed values of AirDirection enum
var AllowedAirDirectionEnumValues = []AirDirection{
	"",
	"auto",
	"swing",
}

func (v *AirDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AirDirection(value)
	for _, existing := range AllowedAirDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AirDirection", value)
}

// NewAirDirectionFromValue returns a pointer to a valid AirDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAirDirectionFromValue(v string) (*AirDirection, error) {
	ev := AirDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AirDirection: valid values are %v", v, AllowedAirDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AirDirection) IsValid() bool {
	for _, existing := range AllowedAirDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AirDirection value
func (v AirDirection) Ptr() *AirDirection {
	return &v
}

type NullableAirDirection struct {
	value *AirDirection
	isSet bool
}

func (v NullableAirDirection) Get() *AirDirection {
	return v.value
}

func (v *NullableAirDirection) Set(val *AirDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableAirDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableAirDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAirDirection(val *AirDirection) *NullableAirDirection {
	return &NullableAirDirection{value: val, isSet: true}
}

func (v NullableAirDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAirDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

