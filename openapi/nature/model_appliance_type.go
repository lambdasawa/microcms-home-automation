/*
Nature API

Read/Write Nature Remo

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ApplianceType Type of the appliance. \"AC\" (Air conditioner), \"TV\" and \"LIGHT\" are 1st class citizen appliance, which is included in our IRDB (InfraRed signals DataBase). The \"ApplianceModel\" stores meta data about the appliance. We provide AC specific UI. Everything else is \"IR\". We just learn the signals from the remote and store them, and when users tap the button on the smartphone app, our server sends it through Remo.
type ApplianceType string

// List of ApplianceType
const (
	APPLIANCETYPE_AC ApplianceType = "AC"
	APPLIANCETYPE_TV ApplianceType = "TV"
	APPLIANCETYPE_LIGHT ApplianceType = "LIGHT"
	APPLIANCETYPE_IR ApplianceType = "IR"
)

// All allowed values of ApplianceType enum
var AllowedApplianceTypeEnumValues = []ApplianceType{
	"AC",
	"TV",
	"LIGHT",
	"IR",
}

func (v *ApplianceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApplianceType(value)
	for _, existing := range AllowedApplianceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApplianceType", value)
}

// NewApplianceTypeFromValue returns a pointer to a valid ApplianceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApplianceTypeFromValue(v string) (*ApplianceType, error) {
	ev := ApplianceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApplianceType: valid values are %v", v, AllowedApplianceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApplianceType) IsValid() bool {
	for _, existing := range AllowedApplianceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApplianceType value
func (v ApplianceType) Ptr() *ApplianceType {
	return &v
}

type NullableApplianceType struct {
	value *ApplianceType
	isSet bool
}

func (v NullableApplianceType) Get() *ApplianceType {
	return v.value
}

func (v *NullableApplianceType) Set(val *ApplianceType) {
	v.value = val
	v.isSet = true
}

func (v NullableApplianceType) IsSet() bool {
	return v.isSet
}

func (v *NullableApplianceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplianceType(val *ApplianceType) *NullableApplianceType {
	return &NullableApplianceType{value: val, isSet: true}
}

func (v NullableApplianceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplianceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

