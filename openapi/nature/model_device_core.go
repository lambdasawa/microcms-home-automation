/*
Nature API

Read/Write Nature Remo

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// DeviceCore struct for DeviceCore
type DeviceCore struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	TemperatureOffset *float32 `json:"temperature_offset,omitempty"`
	HumidityOffset *float32 `json:"humidity_offset,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	FirmwareVersion *string `json:"firmware_version,omitempty"`
	MacAddress *string `json:"mac_address,omitempty"`
	SerialNumber *string `json:"serial_number,omitempty"`
}

// NewDeviceCore instantiates a new DeviceCore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceCore() *DeviceCore {
	this := DeviceCore{}
	return &this
}

// NewDeviceCoreWithDefaults instantiates a new DeviceCore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceCoreWithDefaults() *DeviceCore {
	this := DeviceCore{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeviceCore) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCore) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeviceCore) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeviceCore) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeviceCore) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCore) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeviceCore) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeviceCore) SetName(v string) {
	o.Name = &v
}

// GetTemperatureOffset returns the TemperatureOffset field value if set, zero value otherwise.
func (o *DeviceCore) GetTemperatureOffset() float32 {
	if o == nil || o.TemperatureOffset == nil {
		var ret float32
		return ret
	}
	return *o.TemperatureOffset
}

// GetTemperatureOffsetOk returns a tuple with the TemperatureOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCore) GetTemperatureOffsetOk() (*float32, bool) {
	if o == nil || o.TemperatureOffset == nil {
		return nil, false
	}
	return o.TemperatureOffset, true
}

// HasTemperatureOffset returns a boolean if a field has been set.
func (o *DeviceCore) HasTemperatureOffset() bool {
	if o != nil && o.TemperatureOffset != nil {
		return true
	}

	return false
}

// SetTemperatureOffset gets a reference to the given float32 and assigns it to the TemperatureOffset field.
func (o *DeviceCore) SetTemperatureOffset(v float32) {
	o.TemperatureOffset = &v
}

// GetHumidityOffset returns the HumidityOffset field value if set, zero value otherwise.
func (o *DeviceCore) GetHumidityOffset() float32 {
	if o == nil || o.HumidityOffset == nil {
		var ret float32
		return ret
	}
	return *o.HumidityOffset
}

// GetHumidityOffsetOk returns a tuple with the HumidityOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCore) GetHumidityOffsetOk() (*float32, bool) {
	if o == nil || o.HumidityOffset == nil {
		return nil, false
	}
	return o.HumidityOffset, true
}

// HasHumidityOffset returns a boolean if a field has been set.
func (o *DeviceCore) HasHumidityOffset() bool {
	if o != nil && o.HumidityOffset != nil {
		return true
	}

	return false
}

// SetHumidityOffset gets a reference to the given float32 and assigns it to the HumidityOffset field.
func (o *DeviceCore) SetHumidityOffset(v float32) {
	o.HumidityOffset = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DeviceCore) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCore) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DeviceCore) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DeviceCore) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DeviceCore) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCore) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DeviceCore) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DeviceCore) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetFirmwareVersion returns the FirmwareVersion field value if set, zero value otherwise.
func (o *DeviceCore) GetFirmwareVersion() string {
	if o == nil || o.FirmwareVersion == nil {
		var ret string
		return ret
	}
	return *o.FirmwareVersion
}

// GetFirmwareVersionOk returns a tuple with the FirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCore) GetFirmwareVersionOk() (*string, bool) {
	if o == nil || o.FirmwareVersion == nil {
		return nil, false
	}
	return o.FirmwareVersion, true
}

// HasFirmwareVersion returns a boolean if a field has been set.
func (o *DeviceCore) HasFirmwareVersion() bool {
	if o != nil && o.FirmwareVersion != nil {
		return true
	}

	return false
}

// SetFirmwareVersion gets a reference to the given string and assigns it to the FirmwareVersion field.
func (o *DeviceCore) SetFirmwareVersion(v string) {
	o.FirmwareVersion = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *DeviceCore) GetMacAddress() string {
	if o == nil || o.MacAddress == nil {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCore) GetMacAddressOk() (*string, bool) {
	if o == nil || o.MacAddress == nil {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *DeviceCore) HasMacAddress() bool {
	if o != nil && o.MacAddress != nil {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *DeviceCore) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *DeviceCore) GetSerialNumber() string {
	if o == nil || o.SerialNumber == nil {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCore) GetSerialNumberOk() (*string, bool) {
	if o == nil || o.SerialNumber == nil {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *DeviceCore) HasSerialNumber() bool {
	if o != nil && o.SerialNumber != nil {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *DeviceCore) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

func (o DeviceCore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.TemperatureOffset != nil {
		toSerialize["temperature_offset"] = o.TemperatureOffset
	}
	if o.HumidityOffset != nil {
		toSerialize["humidity_offset"] = o.HumidityOffset
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.FirmwareVersion != nil {
		toSerialize["firmware_version"] = o.FirmwareVersion
	}
	if o.MacAddress != nil {
		toSerialize["mac_address"] = o.MacAddress
	}
	if o.SerialNumber != nil {
		toSerialize["serial_number"] = o.SerialNumber
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceCore struct {
	value *DeviceCore
	isSet bool
}

func (v NullableDeviceCore) Get() *DeviceCore {
	return v.value
}

func (v *NullableDeviceCore) Set(val *DeviceCore) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceCore) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceCore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceCore(val *DeviceCore) *NullableDeviceCore {
	return &NullableDeviceCore{value: val, isSet: true}
}

func (v NullableDeviceCore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceCore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


