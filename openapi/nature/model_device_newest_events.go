/*
Nature API

Read/Write Nature Remo

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DeviceNewestEvents struct for DeviceNewestEvents
type DeviceNewestEvents struct {
	Te *SensorValue `json:"te,omitempty"`
	Hu *SensorValue `json:"hu,omitempty"`
	Il *SensorValue `json:"il,omitempty"`
	Mo *SensorValue `json:"mo,omitempty"`
}

// NewDeviceNewestEvents instantiates a new DeviceNewestEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceNewestEvents() *DeviceNewestEvents {
	this := DeviceNewestEvents{}
	return &this
}

// NewDeviceNewestEventsWithDefaults instantiates a new DeviceNewestEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceNewestEventsWithDefaults() *DeviceNewestEvents {
	this := DeviceNewestEvents{}
	return &this
}

// GetTe returns the Te field value if set, zero value otherwise.
func (o *DeviceNewestEvents) GetTe() SensorValue {
	if o == nil || o.Te == nil {
		var ret SensorValue
		return ret
	}
	return *o.Te
}

// GetTeOk returns a tuple with the Te field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceNewestEvents) GetTeOk() (*SensorValue, bool) {
	if o == nil || o.Te == nil {
		return nil, false
	}
	return o.Te, true
}

// HasTe returns a boolean if a field has been set.
func (o *DeviceNewestEvents) HasTe() bool {
	if o != nil && o.Te != nil {
		return true
	}

	return false
}

// SetTe gets a reference to the given SensorValue and assigns it to the Te field.
func (o *DeviceNewestEvents) SetTe(v SensorValue) {
	o.Te = &v
}

// GetHu returns the Hu field value if set, zero value otherwise.
func (o *DeviceNewestEvents) GetHu() SensorValue {
	if o == nil || o.Hu == nil {
		var ret SensorValue
		return ret
	}
	return *o.Hu
}

// GetHuOk returns a tuple with the Hu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceNewestEvents) GetHuOk() (*SensorValue, bool) {
	if o == nil || o.Hu == nil {
		return nil, false
	}
	return o.Hu, true
}

// HasHu returns a boolean if a field has been set.
func (o *DeviceNewestEvents) HasHu() bool {
	if o != nil && o.Hu != nil {
		return true
	}

	return false
}

// SetHu gets a reference to the given SensorValue and assigns it to the Hu field.
func (o *DeviceNewestEvents) SetHu(v SensorValue) {
	o.Hu = &v
}

// GetIl returns the Il field value if set, zero value otherwise.
func (o *DeviceNewestEvents) GetIl() SensorValue {
	if o == nil || o.Il == nil {
		var ret SensorValue
		return ret
	}
	return *o.Il
}

// GetIlOk returns a tuple with the Il field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceNewestEvents) GetIlOk() (*SensorValue, bool) {
	if o == nil || o.Il == nil {
		return nil, false
	}
	return o.Il, true
}

// HasIl returns a boolean if a field has been set.
func (o *DeviceNewestEvents) HasIl() bool {
	if o != nil && o.Il != nil {
		return true
	}

	return false
}

// SetIl gets a reference to the given SensorValue and assigns it to the Il field.
func (o *DeviceNewestEvents) SetIl(v SensorValue) {
	o.Il = &v
}

// GetMo returns the Mo field value if set, zero value otherwise.
func (o *DeviceNewestEvents) GetMo() SensorValue {
	if o == nil || o.Mo == nil {
		var ret SensorValue
		return ret
	}
	return *o.Mo
}

// GetMoOk returns a tuple with the Mo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceNewestEvents) GetMoOk() (*SensorValue, bool) {
	if o == nil || o.Mo == nil {
		return nil, false
	}
	return o.Mo, true
}

// HasMo returns a boolean if a field has been set.
func (o *DeviceNewestEvents) HasMo() bool {
	if o != nil && o.Mo != nil {
		return true
	}

	return false
}

// SetMo gets a reference to the given SensorValue and assigns it to the Mo field.
func (o *DeviceNewestEvents) SetMo(v SensorValue) {
	o.Mo = &v
}

func (o DeviceNewestEvents) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Te != nil {
		toSerialize["te"] = o.Te
	}
	if o.Hu != nil {
		toSerialize["hu"] = o.Hu
	}
	if o.Il != nil {
		toSerialize["il"] = o.Il
	}
	if o.Mo != nil {
		toSerialize["mo"] = o.Mo
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceNewestEvents struct {
	value *DeviceNewestEvents
	isSet bool
}

func (v NullableDeviceNewestEvents) Get() *DeviceNewestEvents {
	return v.value
}

func (v *NullableDeviceNewestEvents) Set(val *DeviceNewestEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceNewestEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceNewestEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceNewestEvents(val *DeviceNewestEvents) *NullableDeviceNewestEvents {
	return &NullableDeviceNewestEvents{value: val, isSet: true}
}

func (v NullableDeviceNewestEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceNewestEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


