/*
Nature API

Read/Write Nature Remo

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// EchonetLiteProperty The ECHONET lite properties fetched from the appliance. See \"Detailed Requirements for ECHONET Device Objects\" for more details. ref. https://echonet.jp/spec_object_rl_en/ 
type EchonetLiteProperty struct {
	Name *string `json:"name,omitempty"`
	// ECHONET Property
	Epc *int32 `json:"epc,omitempty"`
	Val *string `json:"val,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewEchonetLiteProperty instantiates a new EchonetLiteProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEchonetLiteProperty() *EchonetLiteProperty {
	this := EchonetLiteProperty{}
	return &this
}

// NewEchonetLitePropertyWithDefaults instantiates a new EchonetLiteProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEchonetLitePropertyWithDefaults() *EchonetLiteProperty {
	this := EchonetLiteProperty{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EchonetLiteProperty) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EchonetLiteProperty) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EchonetLiteProperty) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EchonetLiteProperty) SetName(v string) {
	o.Name = &v
}

// GetEpc returns the Epc field value if set, zero value otherwise.
func (o *EchonetLiteProperty) GetEpc() int32 {
	if o == nil || o.Epc == nil {
		var ret int32
		return ret
	}
	return *o.Epc
}

// GetEpcOk returns a tuple with the Epc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EchonetLiteProperty) GetEpcOk() (*int32, bool) {
	if o == nil || o.Epc == nil {
		return nil, false
	}
	return o.Epc, true
}

// HasEpc returns a boolean if a field has been set.
func (o *EchonetLiteProperty) HasEpc() bool {
	if o != nil && o.Epc != nil {
		return true
	}

	return false
}

// SetEpc gets a reference to the given int32 and assigns it to the Epc field.
func (o *EchonetLiteProperty) SetEpc(v int32) {
	o.Epc = &v
}

// GetVal returns the Val field value if set, zero value otherwise.
func (o *EchonetLiteProperty) GetVal() string {
	if o == nil || o.Val == nil {
		var ret string
		return ret
	}
	return *o.Val
}

// GetValOk returns a tuple with the Val field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EchonetLiteProperty) GetValOk() (*string, bool) {
	if o == nil || o.Val == nil {
		return nil, false
	}
	return o.Val, true
}

// HasVal returns a boolean if a field has been set.
func (o *EchonetLiteProperty) HasVal() bool {
	if o != nil && o.Val != nil {
		return true
	}

	return false
}

// SetVal gets a reference to the given string and assigns it to the Val field.
func (o *EchonetLiteProperty) SetVal(v string) {
	o.Val = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *EchonetLiteProperty) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EchonetLiteProperty) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *EchonetLiteProperty) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *EchonetLiteProperty) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o EchonetLiteProperty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Epc != nil {
		toSerialize["epc"] = o.Epc
	}
	if o.Val != nil {
		toSerialize["val"] = o.Val
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableEchonetLiteProperty struct {
	value *EchonetLiteProperty
	isSet bool
}

func (v NullableEchonetLiteProperty) Get() *EchonetLiteProperty {
	return v.value
}

func (v *NullableEchonetLiteProperty) Set(val *EchonetLiteProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableEchonetLiteProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableEchonetLiteProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEchonetLiteProperty(val *EchonetLiteProperty) *NullableEchonetLiteProperty {
	return &NullableEchonetLiteProperty{value: val, isSet: true}
}

func (v NullableEchonetLiteProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEchonetLiteProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


