/*
Nature API

Read/Write Nature Remo

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LIGHT struct for LIGHT
type LIGHT struct {
	State *LIGHTState `json:"state,omitempty"`
	Buttons []Button `json:"buttons,omitempty"`
}

// NewLIGHT instantiates a new LIGHT object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLIGHT() *LIGHT {
	this := LIGHT{}
	return &this
}

// NewLIGHTWithDefaults instantiates a new LIGHT object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLIGHTWithDefaults() *LIGHT {
	this := LIGHT{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *LIGHT) GetState() LIGHTState {
	if o == nil || o.State == nil {
		var ret LIGHTState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LIGHT) GetStateOk() (*LIGHTState, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *LIGHT) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given LIGHTState and assigns it to the State field.
func (o *LIGHT) SetState(v LIGHTState) {
	o.State = &v
}

// GetButtons returns the Buttons field value if set, zero value otherwise.
func (o *LIGHT) GetButtons() []Button {
	if o == nil || o.Buttons == nil {
		var ret []Button
		return ret
	}
	return o.Buttons
}

// GetButtonsOk returns a tuple with the Buttons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LIGHT) GetButtonsOk() ([]Button, bool) {
	if o == nil || o.Buttons == nil {
		return nil, false
	}
	return o.Buttons, true
}

// HasButtons returns a boolean if a field has been set.
func (o *LIGHT) HasButtons() bool {
	if o != nil && o.Buttons != nil {
		return true
	}

	return false
}

// SetButtons gets a reference to the given []Button and assigns it to the Buttons field.
func (o *LIGHT) SetButtons(v []Button) {
	o.Buttons = v
}

func (o LIGHT) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Buttons != nil {
		toSerialize["buttons"] = o.Buttons
	}
	return json.Marshal(toSerialize)
}

type NullableLIGHT struct {
	value *LIGHT
	isSet bool
}

func (v NullableLIGHT) Get() *LIGHT {
	return v.value
}

func (v *NullableLIGHT) Set(val *LIGHT) {
	v.value = val
	v.isSet = true
}

func (v NullableLIGHT) IsSet() bool {
	return v.isSet
}

func (v *NullableLIGHT) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLIGHT(val *LIGHT) *NullableLIGHT {
	return &NullableLIGHT{value: val, isSet: true}
}

func (v NullableLIGHT) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLIGHT) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


