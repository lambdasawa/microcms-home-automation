/*
Nature API

Read/Write Nature Remo

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LIGHTState struct for LIGHTState
type LIGHTState struct {
	Brightness *string `json:"brightness,omitempty"`
	Power *string `json:"power,omitempty"`
	LastButton *string `json:"last_button,omitempty"`
}

// NewLIGHTState instantiates a new LIGHTState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLIGHTState() *LIGHTState {
	this := LIGHTState{}
	return &this
}

// NewLIGHTStateWithDefaults instantiates a new LIGHTState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLIGHTStateWithDefaults() *LIGHTState {
	this := LIGHTState{}
	return &this
}

// GetBrightness returns the Brightness field value if set, zero value otherwise.
func (o *LIGHTState) GetBrightness() string {
	if o == nil || o.Brightness == nil {
		var ret string
		return ret
	}
	return *o.Brightness
}

// GetBrightnessOk returns a tuple with the Brightness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LIGHTState) GetBrightnessOk() (*string, bool) {
	if o == nil || o.Brightness == nil {
		return nil, false
	}
	return o.Brightness, true
}

// HasBrightness returns a boolean if a field has been set.
func (o *LIGHTState) HasBrightness() bool {
	if o != nil && o.Brightness != nil {
		return true
	}

	return false
}

// SetBrightness gets a reference to the given string and assigns it to the Brightness field.
func (o *LIGHTState) SetBrightness(v string) {
	o.Brightness = &v
}

// GetPower returns the Power field value if set, zero value otherwise.
func (o *LIGHTState) GetPower() string {
	if o == nil || o.Power == nil {
		var ret string
		return ret
	}
	return *o.Power
}

// GetPowerOk returns a tuple with the Power field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LIGHTState) GetPowerOk() (*string, bool) {
	if o == nil || o.Power == nil {
		return nil, false
	}
	return o.Power, true
}

// HasPower returns a boolean if a field has been set.
func (o *LIGHTState) HasPower() bool {
	if o != nil && o.Power != nil {
		return true
	}

	return false
}

// SetPower gets a reference to the given string and assigns it to the Power field.
func (o *LIGHTState) SetPower(v string) {
	o.Power = &v
}

// GetLastButton returns the LastButton field value if set, zero value otherwise.
func (o *LIGHTState) GetLastButton() string {
	if o == nil || o.LastButton == nil {
		var ret string
		return ret
	}
	return *o.LastButton
}

// GetLastButtonOk returns a tuple with the LastButton field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LIGHTState) GetLastButtonOk() (*string, bool) {
	if o == nil || o.LastButton == nil {
		return nil, false
	}
	return o.LastButton, true
}

// HasLastButton returns a boolean if a field has been set.
func (o *LIGHTState) HasLastButton() bool {
	if o != nil && o.LastButton != nil {
		return true
	}

	return false
}

// SetLastButton gets a reference to the given string and assigns it to the LastButton field.
func (o *LIGHTState) SetLastButton(v string) {
	o.LastButton = &v
}

func (o LIGHTState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Brightness != nil {
		toSerialize["brightness"] = o.Brightness
	}
	if o.Power != nil {
		toSerialize["power"] = o.Power
	}
	if o.LastButton != nil {
		toSerialize["last_button"] = o.LastButton
	}
	return json.Marshal(toSerialize)
}

type NullableLIGHTState struct {
	value *LIGHTState
	isSet bool
}

func (v NullableLIGHTState) Get() *LIGHTState {
	return v.value
}

func (v *NullableLIGHTState) Set(val *LIGHTState) {
	v.value = val
	v.isSet = true
}

func (v NullableLIGHTState) IsSet() bool {
	return v.isSet
}

func (v *NullableLIGHTState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLIGHTState(val *LIGHTState) *NullableLIGHTState {
	return &NullableLIGHTState{value: val, isSet: true}
}

func (v NullableLIGHTState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLIGHTState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


