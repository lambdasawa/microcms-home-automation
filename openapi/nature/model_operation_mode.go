/*
Nature API

Read/Write Nature Remo

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OperationMode The range of OperationModes which the air conditioner accepts depends on the air conditioner model. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model.
type OperationMode string

// List of OperationMode
const (
	OPERATIONMODE_EMPTY OperationMode = ""
	OPERATIONMODE_COOL OperationMode = "cool"
	OPERATIONMODE_WARM OperationMode = "warm"
	OPERATIONMODE_DRY OperationMode = "dry"
	OPERATIONMODE_BLOW OperationMode = "blow"
	OPERATIONMODE_AUTO OperationMode = "auto"
)

// All allowed values of OperationMode enum
var AllowedOperationModeEnumValues = []OperationMode{
	"",
	"cool",
	"warm",
	"dry",
	"blow",
	"auto",
}

func (v *OperationMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OperationMode(value)
	for _, existing := range AllowedOperationModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OperationMode", value)
}

// NewOperationModeFromValue returns a pointer to a valid OperationMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOperationModeFromValue(v string) (*OperationMode, error) {
	ev := OperationMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OperationMode: valid values are %v", v, AllowedOperationModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OperationMode) IsValid() bool {
	for _, existing := range AllowedOperationModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OperationMode value
func (v OperationMode) Ptr() *OperationMode {
	return &v
}

type NullableOperationMode struct {
	value *OperationMode
	isSet bool
}

func (v NullableOperationMode) Get() *OperationMode {
	return v.value
}

func (v *NullableOperationMode) Set(val *OperationMode) {
	v.value = val
	v.isSet = true
}

func (v NullableOperationMode) IsSet() bool {
	return v.isSet
}

func (v *NullableOperationMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperationMode(val *OperationMode) *NullableOperationMode {
	return &NullableOperationMode{value: val, isSet: true}
}

func (v NullableOperationMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperationMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

