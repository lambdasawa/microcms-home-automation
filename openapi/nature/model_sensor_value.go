/*
Nature API

Read/Write Nature Remo

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// SensorValue The reference key to SensorValue means \"te\" = temperature, \"hu\" = humidity, \"il\" = illumination, \"mo\" = movement. The val of \"mo\" is always 1 and when movement event is captured created_at is updated. 
type SensorValue struct {
	Val *float32 `json:"val,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

// NewSensorValue instantiates a new SensorValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorValue() *SensorValue {
	this := SensorValue{}
	return &this
}

// NewSensorValueWithDefaults instantiates a new SensorValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorValueWithDefaults() *SensorValue {
	this := SensorValue{}
	return &this
}

// GetVal returns the Val field value if set, zero value otherwise.
func (o *SensorValue) GetVal() float32 {
	if o == nil || o.Val == nil {
		var ret float32
		return ret
	}
	return *o.Val
}

// GetValOk returns a tuple with the Val field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorValue) GetValOk() (*float32, bool) {
	if o == nil || o.Val == nil {
		return nil, false
	}
	return o.Val, true
}

// HasVal returns a boolean if a field has been set.
func (o *SensorValue) HasVal() bool {
	if o != nil && o.Val != nil {
		return true
	}

	return false
}

// SetVal gets a reference to the given float32 and assigns it to the Val field.
func (o *SensorValue) SetVal(v float32) {
	o.Val = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SensorValue) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorValue) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SensorValue) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SensorValue) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o SensorValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Val != nil {
		toSerialize["val"] = o.Val
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableSensorValue struct {
	value *SensorValue
	isSet bool
}

func (v NullableSensorValue) Get() *SensorValue {
	return v.value
}

func (v *NullableSensorValue) Set(val *SensorValue) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorValue) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorValue(val *SensorValue) *NullableSensorValue {
	return &NullableSensorValue{value: val, isSet: true}
}

func (v NullableSensorValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


