/*
Nature API

Read/Write Nature Remo

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TVState struct for TVState
type TVState struct {
	Input *string `json:"input,omitempty"`
}

// NewTVState instantiates a new TVState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTVState() *TVState {
	this := TVState{}
	return &this
}

// NewTVStateWithDefaults instantiates a new TVState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTVStateWithDefaults() *TVState {
	this := TVState{}
	return &this
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *TVState) GetInput() string {
	if o == nil || o.Input == nil {
		var ret string
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TVState) GetInputOk() (*string, bool) {
	if o == nil || o.Input == nil {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *TVState) HasInput() bool {
	if o != nil && o.Input != nil {
		return true
	}

	return false
}

// SetInput gets a reference to the given string and assigns it to the Input field.
func (o *TVState) SetInput(v string) {
	o.Input = &v
}

func (o TVState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Input != nil {
		toSerialize["input"] = o.Input
	}
	return json.Marshal(toSerialize)
}

type NullableTVState struct {
	value *TVState
	isSet bool
}

func (v NullableTVState) Get() *TVState {
	return v.value
}

func (v *NullableTVState) Set(val *TVState) {
	v.value = val
	v.isSet = true
}

func (v NullableTVState) IsSet() bool {
	return v.isSet
}

func (v *NullableTVState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTVState(val *TVState) *NullableTVState {
	return &NullableTVState{value: val, isSet: true}
}

func (v NullableTVState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTVState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


